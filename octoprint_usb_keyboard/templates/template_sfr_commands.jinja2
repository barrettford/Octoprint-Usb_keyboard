<template id='template-sfr-commands'>
  <span><strong>Commands</strong></span>
  &emsp;<button class="btn btn-primary" data-bind="click: createCommand">{{ _('+') }}</button>
  &nbsp;<button class="btn" data-bind="css: infoClass, click: toggleInfo"></button>
  <div data-bind="visible: showingInfo">
    <hr>
    <p><b>Commands List</b>&emsp;<button class="btn" data-bind="css: infoClass, click: toggleInfo"></button></p>
    <ul>
      <li>
        <button class="btn btn-primary">{{ _('+') }}</button> creates a new command. New commands can
        also be created from the keyboard above.
      </li>
    </ul>
    <hr>
  </div>

  <table class="commandTable">
    <tbody>
      <!-- ko foreach: commands -->
      <tr>
        <td>
          <sfr-commands-command params='commandObject: $data, parentArray: $parent.commands, allowedVariables: $parent.allowedVariables, profile: $parent.profile, profileNames: $parent.profileNames, locked: $parent.locked, root: $root'></sfr-commands-command>
        </td>
      </tr>
      <!-- /ko -->
    </tbody>
  </table>
</template>


<template id='template-sfr-commands-command'>
  <button class="btn btn-default" data-bind="css: expandedClass, click: toggleExpanded"></button>
  &nbsp;<button class="btn btn-default" data-bind="css: lockedClass, click: toggleLock, visible: expanded"></button>
  &nbsp;<button class="btn btn-default fa fa-arrow-up" data-bind="click: moveSelfUp"></button>
  &nbsp;<button class="btn btn-default fa fa-arrow-down" data-bind="click: moveSelfDown"></button>
  &nbsp;<button class="btn btn-danger" data-bind="click: deleteSelf, attr: {disabled: locked}, visible: expanded">{{ _('-') }}</button>
  &nbsp;<button class="btn" data-bind="css: infoClass, click: toggleInfo, visible: expanded"></button>
  &emsp;<span><strong data-bind="text: commandText()"></strong></span>

  <div data-bind="visible: showingInfo">
    <hr>
    <p><b>Command Keys and Configuration</b>&emsp;<button class="btn" data-bind="css: infoClass, click: toggleInfo"></button></p>
    <ul>
      <li>
        <button class="btn btn-default" data-bind="css: expandedClass"></button> expands/contracts the command configuration fields.
        Helps you stay focused on one command at a time.
      </li>
      <li>
        <button class="btn btn-default" data-bind="css: lockedClass"></button> locks/unlocks textfields and buttons.
      </li>
      <li>
        <button class="btn btn-default fa fa-arrow-up"></button><button class="btn btn-default fa fa-arrow-down"></button> Moves command up/down respectively in the list.
        Purely organizational.
      </li>
      <li>
        <button class="btn btn-danger">{{ _('-') }}</button> deletes this command. Poof. Gone.
      </li>
      <li>
        <input class="centered" placeholder="Enter key..."/> allows you to enter/edit the key that triggers this command.
      </li>
      <li>
        <button class="btn btn-default">{{ _('Get Key') }}</button> assigns the next key pressed on the attached keyboard
        to this command. (If on linux, make sure you've already configured your input device)
      </li>
      <li>
        <button class="btn btn-danger">{{ _('Clear Key') }}</button> clears the key field.
      </li>
      <li>
        <input class="centered" placeholder="Optional alias..." /> allows you to enter/edit the key alias. Has no affect
        on the command, it just makes it easier for you to organize your commands.
      </li>
    </ul>
    <p>Each command has three additional sections: <b>Pressed</b>, <b>Released</b>, and <b>Variables</b></p>
    <ul>
      <li>
        <b>Pressed</b> section lists the commands that will be run whenever the key
        represented in <input class="centered" placeholder="Enter key..."/> is pressed.
        Commands are run in order, starting at 1.
          <ul>
            <li>
              <select data-bind="options: allowedCommandActions"></select> lets you select one of the valid command types.
            </li>
            <li>
              <button class="btn btn-primary">{{ _('+') }}</button> adds a new command of the selected type.
            </li>
          </ul>
        </li>
        <li>
          <b>Released</b> section lists the commands that will be run whenever the key
          represented in <input class="centered" placeholder="Enter key..."/> is released.
          Commands are run in order, starting at 1.
          <ul>
            <li>
              <select data-bind="options: allowedCommandActions"></select> lets you select one of the valid command types.
            </li>
            <li>
              <button class="btn btn-primary">{{ _('+') }}</button> adds a new command of the selected type.
            </li>
          </ul>
      </li>
      <li>
        The <b>Variables</b> section lists the settable variables defined in the <b>Profile</b>><b>Variables</b> section.
      </li>
    </ul>
    <hr>
  </div>

  <ul data-bind="visible: expanded">
    <li>
      <table>
        <tr>
          <td>Key:</td>
          <td><input class="centered" placeholder="Enter key..." data-bind="textInput: key, attr: {disabled: locked}" /></td>
          <td><button class="btn btn-default" data-bind="click: keyDiscovery, attr: {disabled: locked}">{{ _('Get Key') }}</button></td>
          <td><button class="btn btn-danger" data-bind="click: clearKey, attr: {disabled: (key() == null || locked)}">{{ _('Clear Key') }}</button></td>
        </tr>
        <tr>
          <td>Optional Alias:</td>
          <td><input class="centered" placeholder="Optional alias..." data-bind="textInput: alias, attr: {disabled: locked}" /></td>
        </tr>
      </table>
    </li>

    <li><strong>Pressed</strong>&emsp;<select data-bind="options: allowedCommandActions, value: newCommandAction, attr: {disabled: locked}"></select><button class="btn btn-primary" data-bind="click: createCommandAction.bind($data, pressed), attr: {disabled: locked}">{{ _('+') }}</button>
      <ol>
      <!-- ko foreach: pressed -->
        <!-- ko if: $data.type() == "printer" -->
        <li><sfr-commands-command-printer params='commandActionObject: $data, parentArray: $parent.pressed, profile: $parent.profile, locked: $parent.locked'></sfr-commands-command-printer></li>
        <!-- /ko -->
        <!-- ko if: $data.type().indexOf("_vars") != -1 -->
        <li><sfr-commands-command-listen-save-vars params='commandActionObject: $data, parentArray: $parent.pressed, allowedVariables: $parent.allowedVariables, profile: $parent.profile, locked: $parent.locked'></sfr-commands-command-listen-save-vars></li>
        <!-- /ko -->
        <!-- ko if: $data.type() == "plugin_psucontrol" -->
        <li><sfr-commands-command-plugin-psucontrol params='commandActionObject: $data, parentArray: $parent.pressed, profile: $parent.profile, locked: $parent.locked'></sfr-commands-command-plugin-psucontrol></li>
        <!-- /ko -->
        <!-- ko if: $data.type() == "octoprint" -->
        <li><sfr-commands-command-octoprint params='commandActionObject: $data, parentArray: $parent.pressed, profile: $parent.profile, locked: $parent.locked'></sfr-commands-command-octoprint></li>
        <!-- /ko -->
        <!-- ko if: $data.type() == "set_active_profile" -->
        <li><sfr-commands-command-set-active-profile params='commandActionObject: $data, parentArray: $parent.pressed, profile: $parent.profile, profileNames: $parent.profileNames, locked: $parent.locked'></sfr-commands-command-set-active-profile></li>
        <!-- /ko -->
      <!-- /ko -->
      </ol>
    </li>
    <hr>
    <li>
      <strong>Released</strong>&emsp;<select data-bind="options: allowedCommandActions, value: newCommandAction, attr: {disabled: locked}"></select><button class="btn btn-primary" data-bind="click: createCommandAction.bind($data, released), attr: {disabled: locked}">{{ _('+') }}</button>
      <ol>
      <!-- ko foreach: released -->
        <!-- ko if: $data.type() == "printer" -->
        <li><sfr-commands-command-printer params='commandActionObject: $data, parentArray: $parent.released, profile: $parent.profile, locked: $parent.locked'></sfr-commands-command-printer></li>
        <!-- /ko -->
        <!-- ko if: $data.type().indexOf("_vars") != -1 -->
        <li><sfr-commands-command-listen-save-vars params='commandActionObject: $data, parentArray: $parent.released, allowedVariables: $parent.allowedVariables, profile: $parent.profile, locked: $parent.locked'></sfr-commands-command-listen-save-vars></li>
        <!-- /ko -->
        <!-- ko if: $data.type() == "plugin_psucontrol" -->
        <li><sfr-commands-command-plugin-psucontrol params='commandActionObject: $data, parentArray: $parent.released, profile: $parent.profile, locked: $parent.locked'></sfr-commands-command-plugin-psucontrol></li>
        <!-- /ko -->
        <!-- ko if: $data.type() == "octoprint" -->
        <li><sfr-commands-command-octoprint params='commandActionObject: $data, parentArray: $parent.released, profile: $parent.profile, locked: $parent.locked'></sfr-commands-command-octoprint></li>
        <!-- /ko -->
        <!-- ko if: $data.type() == "set_active_profile" -->
        <li><sfr-commands-command-set-active-profile params='commandActionObject: $data, parentArray: $parent.released, profile: $parent.profile, profileNames: $parent.profileNames, locked: $parent.locked'></sfr-commands-command-set-active-profile></li>
        <!-- /ko -->
      <!-- /ko -->
      </ol>
    </li>
    <hr>
    <li>
      <sfr-commands-command-variables params='variables: variables, allowedVariables: allowedVariables, profile: profile, locked: locked'></sfr-commands-command-variables>
    </li>
    <hr>
  </ul>


</template>


<template id='template-sfr-commands-command-variables'>
  <span><strong>Variables:</strong></span>
  &emsp;<button class="btn" data-bind="css: infoClass, click: toggleInfo"></button>

  <div data-bind="visible: showingInfo">
    <hr>
    <p><b>Variable Assignment Configuration</b>&emsp;<button class="btn" data-bind="css: infoClass, click: toggleInfo"></button></p>
    <ul>
      <li>
        <select data-bind="options: localAllowedVariables"></select> contains the list of availble variables.
        These variables are defined in the <b>Profile</b>><b>Variables</b> section.
      </li>
      <li>
        <input placeholder="Enter value..." data-bind="textInput: newVariableValue"/> allows you to enter the variable value.
      </li>
      <li>
         <button class="btn btn-primary">{{ _('+') }}</button> adds the variable to the list below.
      </li>
      <li>
        <button class="btn btn-danger">{{ _('-') }}</button> deletes the preceeding variable/value.
      </li>
    </ul>
    <p>Values defined here can be assigned to their associated variable during the 'listen_vars', press key, 'save_vars' command flow.
    <hr>
  </div>
  <dl>
    <dd>
      <table>
        <tbody data-bind="if: localAllowedVariables().length > 0">
          <tr>
            <td><select data-bind="options: localAllowedVariables, value: newVariableKey, attr: {disabled: locked}"></select></td>
            <td><input placeholder="Enter value..." data-bind="textInput: newVariableValue, attr: {disabled: locked}" /></td>
            <td>
              <button class="btn btn-primary" data-bind="click: addVariable, attr: {disabled: locked}">{{ _('+') }}</button>
            </td>
          </tr>
        </tbody>
        <tbody data-bind="foreach: variables">
          <tr>
            <td data-bind="text: $data.key"></td>
            <td><input placeholder="Enter value..." data-bind="textInput: value, attr: {disabled: $parent.locked}" /></td>
            <td>
              <button class="btn btn-danger" data-bind="click: $parent.deleteVariable.bind(key, $index), attr: {disabled: $parent.locked}">{{ _('-') }}</button>
            </td>
          </tr>
        </tbody>
      </table>
    </dd>
  </dl>

</template>


<template id='template-sfr-commands-command-printer'>
  <strong>Command Type:</strong>
  &emsp;<span data-bind="text: type"></span>
  &emsp;<button class="btn btn-default fa fa-arrow-up" data-bind="click: moveSelfUp, attr: {disabled: locked}"></button>
  &nbsp;<button class="btn btn-default fa fa-arrow-down" data-bind="click: moveSelfDown, attr: {disabled: locked}"></button>
  &nbsp;<button class="btn btn-danger" data-bind="click: deleteSelf, attr: {disabled: locked}">{{ _('-') }}</button>
  &nbsp;<button class="btn" data-bind="css: infoClass, click: toggleInfo"></button>

  <div data-bind="visible: showingInfo">
    <hr>
    <p><b>Printer Command Configuration</b>&emsp;<button class="btn" data-bind="css: infoClass, click: toggleInfo"></button></p>
    <ul>
      <li>
        <button class="btn btn-default fa fa-arrow-up"></button><button class="btn btn-default fa fa-arrow-down"></button>
        moves this command up/down, respectively, in the command execution order.
      </li>
      <li>
        <button class="btn btn-danger">{{ _('-') }}</button> deletes this command. Poof. Gone.
      </li>
      <li>
         Sending Options <button class="btn btn-default fa fa-caret-left"></button>/<button class="btn btn-default fa fa-caret-down"></button> reveals/hides the gcode command sending options. See inside for more info.
      </li>
      <li>
        Gcode to run:
        <ul>
          <li>
            <input placeholder="Enter gcode..."/> Enter gcode commands here. One command per line, they will run in order.
            <ul>
              <li>
                <b>Using variables:</b> Include &lt;foo&gt; and the current value of variable 'foo' will replace it.
                For example, I have a variable 'hotend' with a value of 200. I could create the command
                'M104 S&lt;hotend&gt;' and the current value of variable 'hotend' will replace it, resulting in
                'M104 S200' being sent to the printer.
              </li>
            </ul>
          </li>
          <li>
            <button class="btn btn-danger">{{ _('-') }}</button> deletes the preceeding line.
          </li>
          <li>
            <button class="btn btn-primary">{{ _('+') }}</button> adds a new line.
          </li>
        </ul>
      </li>
    </ul>
    <hr>
  </div>

  <br>
  <sfr-commands-command-printer-options params='options: options, profile: profile, locked: locked'></sfr-commands-command-printer-options>
  <br>
  Gcode to run: <button class="btn btn-primary" data-bind="click: addLine, attr: {disabled: locked}">{{ _('+') }}</button>

  <ol>
    <!-- ko foreach: gcode -->
    <sfr-commands-command-printer-gcode params='gcodeCommand: $data, parentArray: $parent.gcode, profile: $parent.profile, locked: $parent.locked'></sfr-commands-command-printer-gcode>
    <!-- /ko -->
  </ol>

</template>


<template id='template-sfr-commands-command-printer-gcode'>
  <li>
    <input placeholder="Enter gcode here..." class="gcodeLine" data-bind="textInput: code, attr: {disabled: locked}"/>
    <button class="btn btn-default fa fa-arrow-up" data-bind="click: moveSelfUp, attr: {disabled: locked}"></button>
    <button class="btn btn-default fa fa-arrow-down" data-bind="click: moveSelfDown, attr: {disabled: locked}"></button>
    <button class="btn btn-danger" data-bind="click: deleteSelf, attr: {disabled: locked}">{{ _('-') }}</button>
  </li>
</template>

<template id='template-sfr-commands-command-printer-options'>
  Sending Options
  &emsp;<button class="btn btn-default" data-bind="css: expandedClass, click: toggleExpanded"></button>

  <div data-bind="visible: expanded">
    Send to printer while...&nbsp;<button class="btn" data-bind="css: infoClass, click: toggleInfo"></button>

    <div data-bind="visible: showingInfo">
      <hr>
      <p><b>Gcode Sending Options Configuration</b>&emsp;<button class="btn" data-bind="css: infoClass, click: toggleInfo"></button></p>
      <ul>
        <li>
          Printing&emsp;<button class="btn fa" data-bind="css: sendWhilePrintingClass"></button> if checked, allows this command to be run while the printer is printing.
        </li>
        <li>
          Paused&emsp;<button class="btn fa" data-bind="css: sendWhilePausedClass"></button> if checked, allows this command to be run while the printer is paused during a print.
        </li>
      </ul>
      <b>FORCE SEND:</b><button class="btn fa" data-bind="css: forceSendClass"></button> if checked, causes this command to be sent IMMEDIATELY to the printer,
      bypassing the queue and without waiting for printer acknowledgements.
      <b>USE AT YOUR OWN RISK!</b>
      <hr>
    </div>

    <ul>
      <li>
        Printing&emsp;<button class="btn fa" data-bind="css: sendWhilePrintingClass, click: toggleSendWhilePrinting, attr: {disabled: locked}"></button>
      </li>
      <li>
        Paused&emsp;<button class="btn fa" data-bind="css: sendWhilePausedClass, click: toggleSendWhilePaused, attr: {disabled: locked}"></button>
      </li>
    </ul>
    <b>FORCE SEND:</b><button class="btn fa" data-bind="css: forceSendClass, click: toggleForceSend, attr: {disabled: locked}"></button>
  </div>
</template>

<template id='template-sfr-commands-command-set-active-profile'>
  <strong>Command Type:</strong>
  &emsp;<span data-bind="text: type"></span>
  &emsp;<button class="btn btn-default fa fa-arrow-up" data-bind="click: moveSelfUp, attr: {disabled: locked}"></button>
  &nbsp;<button class="btn btn-default fa fa-arrow-down" data-bind="click: moveSelfDown, attr: {disabled: locked}"></button>
  &nbsp;<button class="btn btn-danger" data-bind="click: deleteSelf, attr: {disabled: locked}">{{ _('-') }}</button>
  &nbsp;<button class="btn" data-bind="css: infoClass, click: toggleInfo"></button>

  <div data-bind="visible: showingInfo">
    <hr>
    <p><b>Set Active Profile Command Configuration</b>&emsp;<button class="btn" data-bind="css: infoClass, click: toggleInfo"></button></p>
    <ul>
      <li>
        <button class="btn btn-default fa fa-arrow-up"></button><button class="btn btn-default fa fa-arrow-down"></button> moves this command up/down, respectively,
        in the command execution order.
      </li>
      <li>
        <button class="btn btn-danger">{{ _('-') }}</button> deletes this command. Poof. Gone.
      </li>
      <li>
        Set active profile: <select data-bind="options: allowedProfiles()"></select>
        lets you select the profile to change to. Obviously, it only lets you select profiles other than your current profile.
      </li>
      The Active Profile set with this command does not carry over on system restart.
    </ul>
    <hr>
  </div>

  <br>
  Set active profile: <select data-bind="options: allowedProfiles(), value: profileName, attr: {disabled: locked}"></select>
</template>


<template id='template-sfr-commands-command-listen-save-vars'>
  <strong>Command Type:</strong>
  &emsp;<span data-bind="text: type"></span>
  &emsp;<button class="btn btn-default fa fa-arrow-up" data-bind="click: moveSelfUp, attr: {disabled: locked}"></button>
  &nbsp;<button class="btn btn-default fa fa-arrow-down" data-bind="click: moveSelfDown, attr: {disabled: locked}"></button>
  &nbsp;<button class="btn btn-danger" data-bind="click: deleteSelf, attr: {disabled: locked}">{{ _('-') }}</button>
  &nbsp;<button class="btn" data-bind="css: infoClass, click: toggleInfo"></button>

  <div data-bind="visible: showingInfo">
    <hr>
    <p><b>Variable Management Command Configuration</b>&emsp;<button class="btn" data-bind="css: infoClass, click: toggleInfo"></button></p>
    <ul>
      <li>
        <button class="btn btn-default fa fa-arrow-up"></button><button class="btn btn-default fa fa-arrow-down"></button> moves this command up/down, respectively,
        in the command execution order.
      </li>
      <li>
        <button class="btn btn-danger">{{ _('-') }}</button> deletes this command. Poof. Gone.
      </li>
      <!-- ko if: type() === 'save_vars' -->
      <li>
        Select one or more variables: <select data-bind="options: allowedVariables(), attr: {size: allowedVariables().length}" multiple="true"></select>
        lets you select one or more variables to save. Saving a variable captures the last modification for that variable and stores it for later substitution in gcode.
      </li>
      <!-- /ko -->
      <!-- ko if: type() === 'listen_vars' -->
      <li>
        Select one or more variables: <select data-bind="options: allowedVariables(), attr: {size: allowedVariables().length}" multiple="true"></select>
        lets you select one or more variables to begin listening for. Variables being listened for are staged to update their value until a closing 'save_vars' command for
        that variable is encountered. This simply listens for values, the actual value is not set until a 'save_vars' command targetting this variable is encountered!
      </li>
      <li>
        COMMANDS WILL NOT RUN while a 'listen_vars' command is active. No commands will execute except for a closing 'save_vars' command. That means you can use your entire
        keyboard for commands, and then use the entire keyboard again for variable values! This saves keys and is actually quite intuitive.<br>
        The 'Example 10Key' profiles illustrate this well. The . key, when pressed, starts a 'listen_vars'. While the key is held, pressing the 0,1,2,3 keys will result in
        setting the distance variable to 0.1, 1, 10, 100. The bed and hotend variables are set in a similar manner, with the 4,5,6 and 7,8,9 keys, respectively. Once . is
        released, it will trigger a 'save_vars', and whatever values grabbed will be set to those variables for use in future 'printer' commands.
      </li>
      <!-- /ko -->
    </ul>
    <p>The variables here are created and given default values in the <b>Profile</b>></b>Variables</b> section.</p>
    <hr>
  </div>

  <br>
  Select one or more variables: <select data-bind="options: allowedVariables(), selectedOptions: variables, attr: {disabled: locked, size: allowedVariables().length}" multiple="true"></select>


</template>

<template id='template-sfr-commands-command-plugin-psucontrol'>
  <strong>Command Type:</strong>
  &emsp;<span data-bind="text: type"></span>
  &emsp;<button class="btn btn-default fa fa-arrow-up" data-bind="click: moveSelfUp, attr: {disabled: locked}"></button>
  &nbsp;<button class="btn btn-default fa fa-arrow-down" data-bind="click: moveSelfDown, attr: {disabled: locked}"></button>
  &nbsp;<button class="btn btn-danger" data-bind="click: deleteSelf, attr: {disabled: locked}">{{ _('-') }}</button>
  &nbsp;<button class="btn" data-bind="css: infoClass, click: toggleInfo"></button>

  <div data-bind="visible: showingInfo">
    <hr>
    <p><b>PSU Control Command Configuration</b>&emsp;<button class="btn" data-bind="css: infoClass, click: toggleInfo"></button></p>
    <ul>
      <li>
        <button class="btn btn-default fa fa-arrow-up"></button><button class="btn btn-default fa fa-arrow-down"></button> moves this command up/down, respectively,
        in the command execution order.
      </li>
      <li>
        <button class="btn btn-danger">{{ _('-') }}</button> deletes this command. Poof. Gone.
      </li>
      <li>
        <input placeholder="˚C" class="temperature" maxlength="3" size="3"/>˚C allows you to specify a threshold temperature. Any PSU Command that results in an 'off' action will only trigger if all hotends report being cooler than this specified temperature, in degrees Celsius. If you don't care about hotend temperature and just want it to turn off, set this value to 999 or some other ridiculously high number.
      </li>
      <li>
        <select data-bind="options: supportedCommands"></select> lets you select the command to send to the PSU.
      </li>
    </ul>
    <p>Obviously, this command only works if you have the <a href="https://plugins.octoprint.org/plugins/psucontrol/">PSU Control</a> plugin installed.</p>
    <hr>
  </div>
  <br>
  Prevent PSU shutdown if a hotend is hotter than <input placeholder="˚C" class="temperature" data-bind="textInput: hotendMax, attr: {disabled: locked}" maxlength="3" size="3"/>˚C
  <br>
  PSU Command: <select data-bind="options: supportedCommands, value: command, attr: {disabled: locked}"></select>
</template>

<template id='template-sfr-commands-command-octoprint'>
  <strong>Command Type:</strong>
  &emsp;<span data-bind="text: type"></span>
  &emsp;<button class="btn btn-default fa fa-arrow-up" data-bind="click: moveSelfUp, attr: {disabled: locked}"></button>
  &nbsp;<button class="btn btn-default fa fa-arrow-down" data-bind="click: moveSelfDown, attr: {disabled: locked}"></button>
  &nbsp;<button class="btn btn-danger" data-bind="click: deleteSelf, attr: {disabled: locked}">{{ _('-') }}</button>
  &nbsp;<button class="btn" data-bind="css: infoClass, click: toggleInfo"></button>

  <div data-bind="visible: showingInfo">
    <hr>
    <p><b>Octoprint Command Configuration</b>&emsp;<button class="btn" data-bind="css: infoClass, click: toggleInfo"></button></p>
    <ul>
      <li>
        <button class="btn btn-default fa fa-arrow-up"></button><button class="btn btn-default fa fa-arrow-down"></button> moves this command up/down, respectively,
        in the command execution order.
      </li>
      <li>
        <button class="btn btn-danger">{{ _('-') }}</button> deletes this command. Poof. Gone.
      </li>
      <li>
        <select data-bind="options: supportedCommands"></select> lets you select the command to send to Octoprint. The command "confirm_last_command" causes the last pressed octoprint command to fire, regardless of remaining key presses required.
      </li>
      <li>
        <input placeholder="#" data-bind="textInput: presses_required, attr: {disabled: locked}" maxlength="3" size="3"/> allows you to specify how many command calls, sequentially and without interruption, are required in order to fire this command. This is a safety feature to prevent accidentially canceling/pausing prints with erroneous key presses. This means that if any other command type is run whiles this number is tracking, it will reset the counter to 0. This value has no affect for the "confirm_last_command" command.
      </li>
    </ul>
    <p>Note: "confirm_last_command" only works if the last key pressed/released was another octoprint command.</p>
    <p>Note: The "restart_server", "restart_system", and "shutdown_system" commands use the provided system commands as defined by your Octoprint installation. Octoprint may not set these, therefore these commands may not function. You'll just have to try them and find out.'</p>
    <hr>
  </div>
  <br>
  Octoprint Command: <select data-bind="options: supportedCommands, value: command, attr: {disabled: locked}"></select>
  <br>
  Requires <input placeholder="#" data-bind="textInput: presses_required, attr: {disabled: locked}" maxlength="3" size="3"/> presses to trigger.
</template>
